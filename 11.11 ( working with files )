/* Homework 11.11
 * Matthew Walker, Windows VS2012
 * Write statements to initialize a file, write 10 records, update a record, and delete a record
 *
 */

#include <stdio.h>
#include <string.h>

#define FILENAME "nameage.txt"

struct person {
    unsigned int number;
	char lastName[ 15 ];
	char firstName[ 15 ];
	char age[ 4 ];
};

int menuOptions( void );
void createBlank( void );
void updateRecord( void );
void addTenRecord( void );
void deleteRecord( void );
void showFile( void );


int main()
{
    
	int choice;
    
	while ( ( choice = menuOptions() ) != 5 ) {
		switch( choice ) {
            case 1:
                createBlank();	//create a text file with 10 blank entries
                showFile();
                break;
            case 2:
                showFile();
                updateRecord();  // change values in one record
                showFile();
                break;
            case 3:
                addTenRecord();  // append 2 entries with user input
                showFile();
                break;
            case 4:
                deleteRecord(); // delete a record specified by user
                showFile();
                break;
            default:
                puts( "Invalid choice!\n" );
                break;
		}
	}
    
	return 0;
}

void createBlank( void )     // a) Initialize the file with 100 blank entries
{
	FILE *createPtr;
	int i = 0;
	struct person blankData = { 0, "unassigned", "", "0" };
    
	if ( ( createPtr = fopen( FILENAME, "wb" ) ) == NULL ) {
		puts( "File could not be opened.\n" );
	} else { // initialize with 100 blank records
		for ( i = 0; i < 100; i++ ) {
			fwrite( &blankData, sizeof( struct person ), 1, createPtr );
        }
	}
    
	fclose( createPtr );
}


void addTenRecord( void )   // b) Input account number, last name, first name and age, and write them to the file
{
	FILE *addPtr;
	unsigned int accountNum;
	struct person pData = { 0, "unassigned", "", "0" };
	
	if ( ( addPtr = fopen( FILENAME, "rb+" ) ) == NULL ) {
		puts( "Cannot open the file to add records!\n" );
	} else {
        printf( "Enter the record number to be added: "
                "\n( 1 - 100) 0 to end:  " );
        scanf( "%d", &accountNum );
        
        while ( accountNum != 0 ) {
			fseek( addPtr, ( accountNum - 1 )*sizeof( struct person ), SEEK_SET );
			fread( &pData, sizeof( struct person ), 1, addPtr );

			// display error if account already exists
			if ( pData.number != 0 ) {
				printf( "\nAccount #%d already contains information!\n\n", pData.number );
				break;
			} else {  // create record
				 printf( "Enter the last name to be added: " );
				scanf( "%s", &pData.lastName );  // store user data in struct pData
            
			    printf( "Enter the first name to be added: " );
			    scanf( "%s", &pData.firstName );
            
				printf( "Enter the age to be added: " );
				scanf( "%s", &pData.age );

				pData.number = accountNum;
            
            fseek( addPtr, ( pData.number - 1 )*sizeof( struct person ), SEEK_SET );
            
			// write all the data to the file using pointer to file cfPtr
			fwrite( &pData, sizeof( struct person ), 1, addPtr );
		
            printf( "\nEnter another record number to be added: "
                   "\n( 1 - 100) 0 to end:  " );
            scanf( "%d", &accountNum );
			}
        }
	}    
	fclose( addPtr );
}


void updateRecord( void )    // c) update a record
{
    FILE *updatePtr;
	struct person pData = { 0, "unassigned", "", "0" };

	unsigned int account;
    
    if ( ( updatePtr = fopen( FILENAME, "r+" ) ) == NULL ) {
		puts( "Trouble opening file for updating!\n" );
	} else {
        printf( "Enter the account number of the record you wish to update: " );
        scanf( "%d", &account );
        // move to correct record
        fseek( updatePtr, ( account - 1)*sizeof( struct person ), SEEK_SET );
        
        fread( &pData, sizeof( struct person ), 1, updatePtr );
        
        if ( pData.number == 0 ) {
            printf( "\nAccount #%d has no information!\n\n", account );
        } else {
            printf( "%-6d%-16s%-16s%-5s", pData.number, pData.lastName, pData.firstName, pData.age );
            
            //request updated info from user
            printf( "\nEnter the lastname for that record : " );
            scanf( "%s", &pData.lastName );
            printf( "\nEnter the firstname for that record : " );
            scanf( "%s", &pData.firstName );
            printf( "\nEnter the age for that record : " );
            scanf( "%s", &pData.age );
			pData.number = account;
            
            // move file pointer to correct record in file
            fseek( updatePtr, ( account - 1 )*sizeof( struct person ), SEEK_SET );
            
            // write updated record over old record in file
            fwrite( &pData, sizeof( struct person ), 1, updatePtr );
        }
    }
	fclose( updatePtr );
}

void deleteRecord( void )       // d) delete a record
{
	FILE *deletePtr;
	struct person pData;
	struct person emptyData = { 0, "unassigned", "", "0" };
    
    unsigned int accountNum;
    
	if ( ( deletePtr = fopen( FILENAME, "r+" ) ) == NULL ) {
		puts( "Problem opening the file for deletion!\n" );
	} else {
		printf( "Enter the account number of the record you wish to delete (1-100): " );
		scanf( "%d", &accountNum );

		//move file pointer to correct record
		fseek( deletePtr, ( accountNum - 1 )*sizeof( struct person ), SEEK_SET );

		fread( &pData, sizeof( struct person ), 1, deletePtr );

		//display error if record doesn't exist
		if ( pData.number == 0 ) {
			printf( "Account %d does not exist!\n\n" , accountNum );
		} else {  // delete record by replacing existing record with blank record
			fseek( deletePtr, ( accountNum - 1 )*sizeof( struct person ), SEEK_SET );
			fwrite( &emptyData, sizeof( struct person ), 1, deletePtr );
		}
	}
	fclose( deletePtr );
}
           
int menuOptions( void )
{
	int mChoice;
    
	printf( "\n===========================\nWhat would you like to do today?\n\n"
           "(1) to create a blank text file and add 100 blank entries,\n"
           "(2) to update a single record,\n"
           "(3) to add a user generated record,\n"
           "(4) to delete a single record, or\n"
           "(5) to end the program.\n? " );
	scanf( "%d", &mChoice );
	return mChoice;
}

void showFile( void )
{
	FILE *showPtr;
	struct person pData;
    
	if ( ( showPtr = fopen( FILENAME, "r" ) ) == NULL ) {
		puts( "Can't open file for display!\n" );
	} else {
		while ( fread( &pData, sizeof( pData ), 1, showPtr ) ) {
			if ( pData.number != 0 ) {
				printf( "%-4d%-16s%-16s%-5s\n", pData.number, pData.lastName, pData.firstName, pData.age );
			}
		}
	}
	fclose( showPtr );
}

