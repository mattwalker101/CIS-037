/* Chapter 12
 * Matthew Walker, Windows VS2012
 * Using insert and print lines with linked list
 */

#include <stdio.h>
#include <stdlib.h>

struct listNode {
	char data;
	struct listNode *nextPtr;
};

typedef struct listNode ListNode;
typedef ListNode *ListNodePtr;

void insert( ListNodePtr *sPtr, char value );
char deleteIt( ListNodePtr *sPtr, char value );
int isEmpty( ListNodePtr sPtr );
void printList( ListNodePtr currentPtr );
void instructions( void );

int main( void )
{
	ListNodePtr startPtr = NULL;
	unsigned int choice;
	char item;

	instructions();		// display menu
	printf( "%s", "? " );
	scanf_s( "%u", &choice );

	while ( choice != 3 ) {			//loop until user chooses 3

		switch ( choice ) {
			case 1:
				printf( "Enter a character: " );
				scanf_s( "\n%c", &item );
				insert( &startPtr, item );
				printList( startPtr );
				break;
			case 2:
				if ( !isEmpty( startPtr ) ) {
					printf( "Enter character to be deleted: " );
					scanf_s( "\n%c", &item );
					// if character found, delete it
					if ( deleteIt( &startPtr, item ) ) {
						printf( "%c deleted.\n", item );
						printList( startPtr );
					} else {
						printf( "%c not found.\n", item );
					}
				} else {
					puts( "List is empty.\n" );
				}

				break;
			default:
				puts( "Invalid choice.\n" );
				instructions();
				break;
		} //end switch

		printf( "%s", "? " );
		scanf_s( "%u", &choice );
	}

	puts( "End of run.\n" );
}

void instructions( void )
{
	puts( "Enter your choice:\n"
		"  1 to insert an element into the list.\n"
		"  2 to delete an element from the list.\n"
		"  3 to end.\n" );
}

void insert( ListNodePtr *sPtr, char value )
{
	ListNodePtr newPtr;
	ListNodePtr previousPtr;
	ListNodePtr currentPtr;

	newPtr = malloc( sizeof( ListNode ) );

	if ( newPtr != NULL ) {
		newPtr->data = value;
		newPtr->nextPtr = NULL;

		previousPtr = NULL;
		currentPtr = *sPtr;

		while ( currentPtr != NULL && value > currentPtr->data ) {
			previousPtr = currentPtr;
			currentPtr = currentPtr->nextPtr;
		}

		if ( previousPtr == NULL ) {	// if empty, insert at beginning of list
			newPtr->nextPtr = *sPtr;
			*sPtr = newPtr;
		} else {						// insert new node between previousPtr and currentPtr
			previousPtr->nextPtr = newPtr;
			newPtr->nextPtr = currentPtr;
		}
	} else {
		printf( "%c not inserted. No memory available.\n", value );
	}
}

char deleteIt( ListNodePtr *sPtr, char value )
{
	ListNodePtr previousPtr;
	ListNodePtr currentPtr;
	ListNodePtr tempPtr;

	if ( value == ( *sPtr )->data ) {
		tempPtr = *sPtr;
		*sPtr = ( *sPtr )->nextPtr;
		free( tempPtr );
		return value;
	} else {
		previousPtr = *sPtr;
		currentPtr = ( *sPtr )->nextPtr;

		while ( currentPtr != NULL && currentPtr->data != value ) {
			previousPtr = currentPtr;
			currentPtr = currentPtr->nextPtr;
		}

		if ( currentPtr != NULL ) {
			tempPtr = currentPtr;
			previousPtr->nextPtr = currentPtr->nextPtr;
			free( tempPtr );
			return value;
		}
	}
	return '\0';
}

int isEmpty( ListNodePtr sPtr )	//return 1 if empty, 0 otherwise
{
	return sPtr == NULL;
}

void printList( ListNodePtr currentPtr )
{
	if ( isEmpty( currentPtr ) ) {
		puts( "List is empty.\n" );
	} else {
		puts( "The list is: " );

		while ( currentPtr != NULL ) {
			printf( "%c --> ", currentPtr->data );
			currentPtr = currentPtr->nextPtr;
		}
		puts( "NULL\n" );
	}
}

	
