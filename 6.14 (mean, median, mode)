/* Homework 6.14
 * Matthew Walker, Due 6/30/14, Windows VS2012
 * Computing Mean, Median and Mode
 */

#include <stdio.h>
#define SIZE 104

void mean( const unsigned int answer[] );
void median( unsigned int answer[] );
void mode( unsigned int freq[], unsigned const int answer[] );
void bubbleSort( int a[] );
void printArray( unsigned const int a[] );

int main( void )
{
	unsigned int frequency[ 10 ] = { 0 };	// initialize array frequency

	unsigned int response[ SIZE ] =			// initialize array response
	{ 6, 7, 8, 9, 8, 7, 8, 9, 8, 9,
	  7, 8, 9, 5, 9, 8, 7, 8, 7, 8, 
	  6, 7, 8, 9, 3, 9, 8, 7, 8, 7,
	  7, 8, 9, 8, 9, 8, 9, 7, 8, 9, 
	  6, 7, 8, 7, 8, 7, 9, 8, 9, 2, 
	  7, 8, 9, 8, 9, 8, 9, 7, 5, 3, 
	  5, 6, 7, 2, 5, 3, 9, 4, 6, 4, 
	  7, 8, 9, 6, 8, 7, 8, 9, 7, 8, 
	  7, 4, 4, 2, 5, 3, 8, 7, 5, 6, 
	  4, 5, 6, 1, 6, 5, 7, 8, 7, 7,
	  7, 7, 7, 1};

	//process responses
	mean( response );
	median( response );
	mode( frequency, response );

}	// end main

// calculate average of all response values
void mean( const unsigned int answer[] )
{
	size_t j;
	unsigned int total = 0;

	printf( "%s\n%s\n%s\n", "********", " Mean", "********" );

	for ( j = 0; j < SIZE; ++j) {
		total += answer[ j ];
	}

	printf( "The mean is the average value of the data\n"
			"items. The mean is equal to the total of\n"
			"all the data items divided by the number\n"
			"of data items ( %u ). The mean value for\n"
			"this run is: %u / %u = %.4f\n\n",
			SIZE, total, SIZE, ( double ) total / SIZE );
}	//end function mean

void median( unsigned int answer[] )
{
	printf( "\n%s\n%s\n%s\n%s",
			"********", " Median", "********",
			"The unsorted array of responses is" );

	printArray( answer );

	bubbleSort( answer );

	printf("%s", "\n\nThe sorted array is");
	printArray( answer );

	// if even size array, average the two middle elements, otherwise median is the middle element

	if ( (  SIZE & 1 ) == 0 ) {
		printf( "\n\nThe median is the average of elements %u and %u of\n"
				"the sorted %u element array.\n"
				"For this run the median is %u\n\n",
				SIZE / 2, ( 1 + SIZE / 2 ), SIZE, ( ( answer[ SIZE / 2 ] + answer [ ( 1 + SIZE / 2 ) ] ) / 2 ) ) ;
	} else {
		printf( "\n\nThe median is element %u of\n"
				"the sorted %u element array.\n"
				"For this run the median is %u\n\n",
				SIZE / 2, SIZE, answer[ SIZE / 2 ] );
	}
} // end function median

void mode( unsigned int freq[], const unsigned int answer[] )
{
	size_t rating;	// counter for accessing elements 1-9 of array freq
	size_t j;		// counter for summarizing elements 0-98 of array answer
	unsigned int h;	// counter for displaying histograms freq array values
	unsigned int largest = 0; // represents largest frequency
	unsigned int modeValue = 0; // represents most frequent response

	printf( "\n%s\n%s\n%s\n", 
			"********", " Mode", "********" );
	//initialize frequencies to 0
	for ( rating = 1; rating <= 9; ++rating) {
		freq[ rating ] = 0;
	}

	for ( j = 0; j < SIZE; ++j ) {
		++freq[ answer[ j ] ];
	}

	printf( "%s%11s%19s\n\n%54s\n%54s\n\n",
			"Response", "Frequency", "Histogram", 
			"1    1    2    2", "5    0    5    0    5");

	//output
	for ( rating = 1; rating <= 9; ++rating) {
		printf( "%8u%11u        ", rating, freq[ rating] );

		//keep track of mode value and largest frequency value
		if ( freq[ rating ] > largest ) {
			largest = freq[ rating ];
			modeValue = rating;
		}
				
		//output histogram bar for frequency value
		for ( h = 1; h <= freq[ rating ]; ++h ) {
			printf( "%s", "*");
		}

		puts( "" );
	}
	
	//display the mode value
	printf( "\nThe mode is the most frequent value.\n"
			"The mode occurred with values... \n");
		
	
	// if mode is a tie, make a special note of that
		
	for ( rating = 1; rating <= 9; ++rating) {
		if ( freq[ rating ] == largest ) {
			printf( "%u", rating );
			printf(" which occurred %u times...\n", freq[ rating ]);
		}	
	}	
		
} // end function mode

void bubbleSort( unsigned int a[] )
{
	unsigned int pass;
	size_t j;
	unsigned int hold;

	for ( pass = 1; pass < SIZE; ++pass ) {
		for ( j = 0; j < SIZE - 1; ++j ) {
			if ( a[ j ] > a [ j + 1 ] ) {
				hold = a[ j ];
				a[ j ] = a[ j + 1 ];
				a[ j + 1 ] = hold;
			}
		}
	}
} // end function bubbleSort

void printArray( const unsigned int a[] )
{
	size_t j;

	for ( j = 0; j < SIZE; ++j) {
		if ( j % 20 == 0 ) {
			puts( "" );
		}

		printf( "%2u", a[ j ] );
	}
} // end function printArray
